#include <iostream>
#include <vector>

using namespace std;

constexpr int number = 10;
constexpr int column = 10;
constexpr int rows = 100;

int main_selection[number][column] = {
		{0, 5,5,3,4,10,5,10,9,9},
		{1, 2,3,5,10,6,7,8,14,10},
		{2, 0,9,5,11,6,5,17,7,16},
		{3, 2,11,12,4,13,6,18,7,9},
		{4, 8,4,5,4,10,7,11,13,9},
		{5, 100,9,8,4,14,1,6,10,16},
		{6, 4,5,12,7,12,12,13,1,15},
		{7, 6,12,11,5,8,16,14,100,7},
		{8, 5,13,1,0,9,20,27,10,3},
		{9, 5,7,5,3,9,8,10,9,6},
};
int tmp_mass[number][column] = {
		{0, 5,5,3,4,10,5,10,9,9},
		{1, 2,3,5,10,6,7,8,14,10},
		{2, 0,9,5,11,6,5,17,7,16},
		{3, 2,11,12,4,13,6,18,7,9},
		{4, 8,4,5,4,10,7,11,13,9},
		{5, 100,9,8,4,14,1,6,10,16},
		{6, 4,5,12,7,12,12,13,1,15},
		{7, 6,12,11,5,8,16,14,100,7},
		{8, 5,13,1,0,9,20,27,10,3},
		{9, 5,7,5,3,9,8,10,9,6},
};

//выборки
const int number_err_0[rows][column] = {
	{4,1,0,0,1,1,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{7,0,1,1,0,0,1,0,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{3,0,1,1,0,1,0,1,0,0},
	{7,0,1,1,0,0,1,0,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{3,0,1,1,0,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{8,1,1,0,1,1,1,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{9,1,1,0,1,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{4,1,0,0,1,1,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{5,1,1,0,0,1,0,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{2,0,1,0,1,0,0,1,0,1},
	{9,1,1,0,1,1,0,1,0,0},
	{2,0,1,0,1,0,0,1,0,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{6,0,0,1,0,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{3,0,1,1,0,1,0,1,0,0},
	{5,1,1,0,0,1,0,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{3,0,1,1,0,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
};
const int number_err_4[rows][column] = {
	{4, 1, 1, 1, 0, 1, 0, 1, 1, 0 },
	{2, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
	{6, 1, 0, 1, 1, 0, 1, 0, 1, 0 },
	{3, 1, 1, 1, 0, 1, 1, 0, 0, 1 },
	{9, 0, 0, 0, 0, 1, 0, 1, 1, 0 },
	{1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },
	{7, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
	{0, 1, 0, 1, 1, 0, 0, 0, 0, 1 },
	{5, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
	{8, 0, 1, 1, 1, 0, 0, 0, 1, 1 },
	{9, 1, 0, 0, 0, 1, 1, 1, 0, 1 },
	{0, 1, 0, 0, 1, 0, 0, 0, 0, 0 },
	{5, 0, 0, 1, 0, 0, 0, 0, 1, 1 },
	{1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
	{2, 0, 1, 1, 0, 0, 1, 1, 1, 1 },
	{8, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
	{7, 0, 1, 0, 1, 0, 1, 1, 0, 1 },
	{4, 0, 1, 1, 1, 1, 0, 0, 0, 0 },
	{6, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
	{3, 1, 1, 0, 0, 0, 0, 1, 1, 0 },
	{9, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
	{3, 0, 0, 0, 0, 1, 0, 1, 1, 1 },
	{7, 0, 0, 0, 0, 0, 1, 1, 0, 1 },
	{1, 0, 1, 1, 0, 0, 0, 1, 1, 1 },
	{5, 1, 1, 0, 0, 0, 0, 1, 0, 0 },
	{2, 0, 1, 1, 0, 0, 1, 1, 1, 1 },
	{4, 0, 0, 1, 1, 0, 1, 0, 1, 0 },
	{0, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
	{6, 1, 0, 0, 1, 1, 0, 0, 1, 1 },
	{8, 0, 0, 0, 1, 1, 0, 0, 1, 0 },
	{0, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
	{7, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
	{6, 0, 1, 1, 1, 1, 0, 0, 0, 1 },
	{8, 1, 1, 0, 0, 1, 0, 1, 0, 1 },
	{2, 0, 0, 0, 1, 0, 1, 1, 1, 0 },
	{4, 1, 0, 0, 1, 0, 1, 1, 0, 0 },
	{9, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
	{1, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
	{5, 1, 0, 1, 1, 1, 0, 0, 0, 0 },
	{3, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
	{3, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{6, 0, 1, 1, 1, 1, 1, 1, 0, 1 },
	{0, 1, 1, 0, 1, 1, 1, 1, 0, 0 },
	{9, 0, 1, 0, 0, 0, 0, 1, 0, 1 },
	{1, 1, 0, 1, 0, 0, 1, 1, 1, 0 },
	{2, 0, 0, 0, 0, 0, 1, 0, 0, 1 },
	{8, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
	{7, 0, 1, 1, 0, 0, 0, 1, 1, 1 },
	{4, 1, 1, 1, 0, 1, 0, 1, 1, 0 },
	{5, 1, 0, 1, 0, 1, 1, 0, 0, 1 },
	{5, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
	{1, 1, 1, 1, 1, 0, 1, 0, 0, 0 },
	{6, 0, 1, 1, 1, 1, 1, 0, 0, 0 },
	{3, 0, 1, 0, 0, 1, 1, 0, 1, 0 },
	{8, 1, 0, 0, 1, 1, 0, 1, 0, 1 },
	{2, 0, 1, 1, 0, 0, 1, 1, 0, 0 },
	{7, 0, 1, 1, 1, 0, 0, 1, 0, 1 },
	{4, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
	{9, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
	{0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
	{1, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
	{4, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
	{0, 1, 0, 0, 1, 1, 1, 1, 0, 1 },
	{9, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
	{6, 1, 1, 1, 0, 1, 0, 0, 1, 0 },
	{8, 0, 1, 0, 0, 1, 0, 0, 0, 1 },
	{3, 1, 1, 1, 0, 0, 1, 1, 0, 1 },
	{5, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
	{7, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
	{2, 0, 0, 1, 1, 0, 1, 0, 0, 1 },
	{9, 1, 1, 1, 1, 0, 1, 1, 1, 0 },
	{2, 1, 0, 0, 1, 0, 1, 0, 0, 1 },
	{7, 1, 1, 1, 0, 1, 1, 1, 1, 0 },
	{4, 1, 1, 1, 1, 1, 1, 0, 1, 1 },
	{5, 0, 0, 0, 0, 1, 0, 1, 0, 1 },
	{3, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
	{1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
	{0, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
	{8, 1, 0, 1, 1, 0, 0, 0, 1, 1 },
	{6, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{7, 1, 1, 1, 1, 0, 1, 1, 0, 1 },
	{9, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
	{6, 1, 0, 1, 1, 1, 0, 0, 0, 1 },
	{8, 1, 1, 0, 0, 0, 1, 1, 0, 1 },
	{0, 0, 1, 0, 1, 1, 0, 1, 1, 1 },
	{1, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
	{3, 0, 1, 0, 1, 1, 0, 1, 1, 1 },
	{5, 0, 1, 0, 0, 1, 1, 0, 0, 0 },
	{2, 0, 0, 0, 1, 0, 1, 0, 0, 0 },
	{4, 0, 1, 1, 1, 1, 1, 0, 1, 0 },
	{6, 0, 1, 1, 0, 1, 1, 1, 0, 0 },
	{5, 1, 0, 1, 0, 0, 1, 0, 1, 1 },
	{1, 0, 1, 1, 1, 0, 1, 0, 0, 1 },
	{3, 1, 0, 0, 0, 0, 0, 1, 0, 0 },
	{0, 0, 0, 0, 1, 0, 0, 1, 1, 1 },
	{7, 0, 1, 1, 1, 1, 1, 1, 0, 1 },
	{9, 1, 1, 1, 1, 0, 1, 1, 1, 0 },
	{4, 1, 1, 0, 0, 0, 0, 1, 1, 0 },
	{2, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{8, 0, 0, 0, 1, 0, 0, 0, 1, 1 },
};
const int number_err_9[rows][column] = {
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{6, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{5, 0, 0, 1, 1, 0, 1, 1, 0, 0 },
	{1, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{3, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
	{0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },
	{7, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
	{9, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
	{4, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{2, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{8, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
};

void Perceptron(const int num[][column], int m_selection[][column]) {

	vector<int> errors;
	int x = 0;
	int run = 0;
	int err = 0;
restart:
	for (int point = 0; point < rows; point++) {
		bool flag = false;
		vector <int> weights = {}; //вектор полученных весов
		vector <int> number_weight = {}; //номер числа полученного веса

		for (int i = 0; i < number; i++) {
			int temp = 0;
			for (int j = 1; j < column; j++) {
				temp += m_selection[i][j] * num[point][j];
			}
			weights.push_back(temp);
		}

		int temp_max = *max_element(weights.begin(), weights.end());
		for (int i = 0; i < weights.size(); i++) {
			if (weights[i] >= temp_max) { number_weight.push_back(i); } //если пришли одиновые макс числа, то записываем их номер тоже
		}

		if (num[point][0] == number_weight[0] and number_weight.size() == 1) {} //веса побранны
		else {
			err++;
			for (int iter = 0; iter < number_weight.size(); iter++) {
				int temp = number_weight[iter];
				for (int i = 1; i < column; i++) {
					if (num[point][i] == 1) {
						m_selection[temp][i] -= 1;
					}
				}
			}
			int temp = num[point][0];
			for (int i = 1; i < column; i++) {
				if (num[point][i] == 1) {
					m_selection[temp][i] += 1;
				}
			}
		}
	}
	errors.push_back(err);
	if(run < 3)
	{
		run++; err = 0;
		goto restart;
	}
	if (errors[run - 1] == err) { x++; }

	if  (x <= 5) 
	{
		run++; err = 0;
		goto restart;
	}

	cout << "Err = " << (*min_element(errors.begin(), errors.end())) << endl;
	cout << "Кол-во итераций: " << run << endl;
}

void print_main(double m_selection[][column])
{
	for (int i = 0; i < number; i++)
	{
		for (int j = 1; j < column; j++)
		{
			cout << m_selection[i][j] << " ";
		}cout << endl;
	}
}
void old_main()
{
	for (int i = 0; i < number; i++)
	{
		for (int j = 0; j < column + 1; j++)
		{
			main_selection[i][j] = tmp_mass[i][j];
		}
	}
}


int main()
{//Код написал Иванов Данила
	setlocale(LC_ALL, "Russian");

	int choice; //выбор метода выполния работы

	cout << "Если вы хотите рабоать с персептроном напишите '1'; \n"
		<< "Если хотите работать с нейрной сетью (перовое дерево дихотомии) напишите '2'; \n"
		<< "Если хотите работать с нейрной сетью (перовое дерево дихотомии) напишите '3'; \n"
		<< "Для выхода из программы напишите '4'. \n" << endl;

	cout << "Ваш выбор: "; cin >> choice; cout << endl;

	while (choice != 4)
	{
		switch (choice)
		{
		case 1:
			{
				Perceptron(number_err_0, main_selection);
				Perceptron(number_err_4, main_selection);
				Perceptron(number_err_9, main_selection);
				old_main();
				break;
			}
		case 2:
			{
				cout << "None" << endl;
				break;
			}
		case 3:
			{
				cout << "None" << endl;
				break;
			}
		default:
			{
			cout << "Ошибка при вводе! Попробуйте еще раз! " << endl;
				break;
			}
		}
		cout << "\nВаш выбор: "; cin >> choice; cout << endl;
	}
}
