#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void ADD(int omega[], const int num_selection[100][10], int column, int point) {
	for (int i = 1; i < column; i++) {
		if (num_selection[point][i] == 1) {
			omega[i] += 1;
		}
	}
	//cout << "+" << endl;
}
void SUB(int omega[], const int num_selection[100][10], int column, int point) {
	for (int i = 1; i < column; i++) {
		if (num_selection[point][i] == 1) {
			omega[i] -= 1;
		}
	}
	//cout << "-" << endl;
}

int Neuro_Func(int teta, const int column, const int rows, const int nums[100][10], int omega[],
	vector<int> index, vector<int> index_skip, int errors[])
{
	errors[0] = {0};
	//vector<int>vec;
	for (int point = 0; point < rows; point++)
	{
		int weight = 0; 
		for (int i = 1; i < column; i++)
		{
			weight += omega[i] * nums[point][i];
		}

		const int key = nums[point][0];
		if (ranges::find(index_skip.begin(), index_skip.end(), key) != index_skip.end()) //проверка ненужных числел в выборке
		{
			if (weight > teta) //если вес меньше необходимого
			{
				SUB(omega, nums, column, point);
				errors[0]++;
			}
		}
		if (ranges::find(index.begin(), index.end(), key) != index.end())
		{

			if (weight <= teta) //если вес меньше необходимого
			{
				ADD(omega, nums, column, point);
				errors[0]++;
			}
		}
	}
	//vec.push_back(err);
	return errors[0];
}

void TreeOne(const int num_main[100][10], int teta, const int rows)
{
	const int column = 10;
	int errors_in_tree = 0;
	vector<int> errors_mass;
	int errors[1] = { 0 };
	int omega[column] = { 0,-1,0,11,12,1,2,7,14,5 };

	vector<int> index = { 1,3,5,7,9 }, index_skip = { 0,2,4,6,8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size()*10));

	index = { 7,9 }, index_skip = { 1,3,5 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 7 }, index_skip = { 9 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 9 }, index_skip = { 7 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 1 }, index_skip = { 3,5 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 5 }, index_skip = { 3 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 3 }, index_skip = { 5 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 0,2 }, index_skip = { 4,6,8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 0 }, index_skip = { 2 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 2 }, index_skip = { 0 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 4 }, index_skip = { 6,8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 6 }, index_skip = { 8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 8 }, index_skip = { 6 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	for(auto i : errors_mass)
	{
		if(i < 0)
		{
			errors_in_tree += ~i + 1;
		}
		else
		{
			errors_in_tree += i;
		}
	}

	cout << "Кол-во ошибок: " << errors_in_tree << endl;
}

void TreeTwo(const int num_main[100][10], int teta, const int rows)
{
	const int column = 10;
	int errors_in_tree = 0;
	vector<int> index, index_skip;
	vector<int> errors_mass;
	int errors[1] = { 0 };
	int omega[column] = { 0,-1,0,11,12,1,2,7,14,5 };

	index = { 0,1,2,3,8,9 }, index_skip = { 4,5,6 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));;

	index = { 0,8,9 }, index_skip = { 1,2,3 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 9 }, index_skip = { 0,8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 0 }, index_skip = { 8 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 8 }, index_skip = { 9 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 1 }, index_skip = { 2,3 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 2 }, index_skip = { 3 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 3 }, index_skip = { 2 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 5,6 }, index_skip = { 4,7 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 5 }, index_skip = { 6 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 6 }, index_skip = { 5 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 4 }, index_skip = { 7 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	index = { 7 }, index_skip = { 4 };
	Neuro_Func(teta, column, rows, num_main, omega, index, index_skip, errors);
	errors_mass.push_back(errors[0] - (index.size() * 10));

	for (auto i : errors_mass)
	{
		if (i < 0)
		{
			errors_in_tree += ~i + 1;
		}
		else
		{
			errors_in_tree += i;
		}
	}

	cout << "Кол-во ошибок: " << errors_in_tree << endl;
}

int main()
{
	//Код написал Иванов Данила

	setlocale(LC_ALL, "Russian");

	const int rows = 100, column = 10, teta = 35;

	const int number_err_0[rows][column] = {
	{4,1,0,0,1,1,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{7,0,1,1,0,0,1,0,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{3,0,1,1,0,1,0,1,0,0},
	{7,0,1,1,0,0,1,0,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{3,0,1,1,0,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{8,1,1,0,1,1,1,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{9,1,1,0,1,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{4,1,0,0,1,1,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{9,1,1,0,1,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{5,1,1,0,0,1,0,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{2,0,1,0,1,0,0,1,0,1},
	{9,1,1,0,1,1,0,1,0,0},
	{2,0,1,0,1,0,0,1,0,1},
	{7,0,1,1,0,0,1,0,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{5,1,1,0,0,1,0,0,1,1},
	{3,0,1,1,0,1,0,1,0,0},
	{1,0,0,1,1,0,0,0,1,0},
	{0,1,1,0,1,0,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{6,0,0,1,0,1,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{6,0,0,1,0,1,1,0,1,1},
	{8,1,1,0,1,1,1,0,1,1},
	{0,1,1,0,1,0,1,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{3,0,1,1,0,1,0,1,0,0},
	{5,1,1,0,0,1,0,0,1,1},
	{2,0,1,0,1,0,0,1,0,1},
	{4,1,0,0,1,1,0,0,1,0},
	{6,0,0,1,0,1,1,0,1,1},
	{5,1,1,0,0,1,0,0,1,1},
	{1,0,0,1,1,0,0,0,1,0},
	{3,0,1,1,0,1,0,1,0,0},
	{0,1,1,0,1,0,1,0,1,1},
	{7,0,1,1,0,0,1,0,0,0},
	{9,1,1,0,1,1,0,1,0,0},
	{4,1,0,0,1,1,0,0,1,0},
	{2,0,1,0,1,0,0,1,0,1},
	{8,1,1,0,1,1,1,0,1,1},
	};
	const int number_err_3[rows][column] = {
	{4, 1, 1, 1, 1, 1, 0, 1, 1, 0 },
	{2, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
	{6, 1, 0, 1, 1, 1, 1, 0, 1, 0 },
	{3, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
	{9, 1, 0, 0, 0, 1, 0, 1, 1, 0 },
	{1, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
	{7, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
	{0, 1, 0, 0, 1, 0, 0, 0, 0, 1 },
	{5, 0, 1, 0, 0, 1, 1, 1, 1, 1 },
	{8, 1, 1, 1, 1, 0, 0, 0, 1, 1 },
	{9, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{0, 1, 0, 0, 1, 0, 1, 0, 0, 0 },
	{5, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
	{1, 0, 0, 1, 0, 1, 1, 0, 1, 0 },
	{2, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{8, 0, 1, 0, 0, 1, 1, 1, 1, 1 },
	{7, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
	{4, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
	{6, 1, 1, 1, 0, 1, 1, 0, 0, 1 },
	{3, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
	{9, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
	{3, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
	{7, 0, 0, 0, 0, 0, 1, 1, 0, 0 },
	{1, 0, 0, 1, 0, 0, 0, 1, 1, 1 },
	{5, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
	{2, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{4, 0, 0, 0, 1, 0, 1, 0, 1, 0 },
	{0, 1, 1, 1, 1, 1, 0, 0, 1, 1 },
	{6, 0, 0, 0, 1, 1, 0, 0, 1, 1 },
	{8, 0, 0, 0, 1, 1, 1, 0, 1, 0 },
	{0, 1, 1, 0, 0, 0, 0, 0, 1, 0 },
	{7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{6, 0, 0, 1, 1, 1, 0, 0, 0, 1 },
	{8, 1, 1, 0, 0, 1, 0, 1, 1, 1 },
	{2, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
	{4, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
	{9, 1, 1, 0, 1, 1, 1, 0, 1, 0 },
	{1, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{5, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
	{3, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
	{3, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
	{6, 0, 1, 1, 1, 1, 1, 0, 0, 1 },
	{0, 1, 1, 0, 1, 1, 1, 1, 1, 0 },
	{9, 1, 1, 0, 0, 0, 0, 1, 0, 1 },
	{1, 1, 0, 1, 1, 0, 1, 1, 1, 0 },
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{8, 1, 1, 0, 1, 1, 1, 1, 0, 0 },
	{7, 0, 1, 1, 0, 0, 0, 1, 1, 0 },
	{4, 1, 0, 1, 0, 1, 0, 1, 1, 0 },
	{5, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
	{5, 1, 1, 0, 0, 1, 1, 1, 0, 1 },
	{1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
	{6, 0, 1, 1, 1, 1, 1, 0, 1, 0 },
	{3, 0, 1, 0, 0, 1, 1, 1, 1, 0 },
	{8, 1, 0, 0, 1, 1, 0, 0, 0, 1 },
	{2, 0, 1, 0, 0, 0, 1, 1, 0, 0 },
	{7, 0, 1, 1, 1, 0, 0, 0, 0, 1 },
	{4, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
	{9, 0, 0, 0, 1, 0, 0, 1, 0, 0 },
	{0, 0, 1, 0, 1, 0, 0, 0, 1, 0 },
	{1, 0, 0, 0, 1, 1, 1, 0, 1, 0 },
	{4, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
	{0, 1, 1, 0, 1, 1, 1, 1, 0, 1 },
	{9, 1, 1, 0, 1, 0, 0, 1, 1, 1 },
	{6, 0, 1, 1, 0, 1, 0, 0, 1, 0 },
	{8, 1, 1, 0, 0, 1, 0, 0, 0, 1 },
	{3, 1, 1, 1, 0, 0, 0, 1, 0, 1 },
	{5, 0, 1, 0, 1, 1, 0, 0, 1, 0 },
	{7, 0, 0, 0, 0, 0, 1, 1, 0, 0 },
	{2, 0, 0, 0, 1, 0, 1, 0, 0, 1 },
	{9, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
	{2, 1, 1, 0, 1, 0, 1, 0, 0, 1 },
	{7, 1, 1, 1, 0, 0, 1, 1, 1, 0 },
	{4, 1, 1, 1, 1, 1, 0, 0, 1, 1 },
	{5, 0, 0, 0, 0, 1, 0, 1, 1, 1 },
	{3, 0, 1, 1, 0, 0, 1, 1, 0, 1 },
	{1, 0, 1, 1, 1, 1, 1, 0, 1, 0 },
	{0, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
	{8, 1, 1, 1, 1, 0, 0, 0, 1, 1 },
	{6, 1, 0, 1, 1, 0, 1, 0, 1, 1 },
	{7, 0, 1, 1, 1, 0, 1, 1, 0, 1 },
	{9, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
	{6, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
	{8, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
	{0, 0, 1, 0, 1, 1, 0, 0, 1, 1 },
	{1, 0, 0, 0, 1, 0, 1, 1, 1, 0 },
	{3, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
	{5, 0, 1, 0, 0, 1, 0, 0, 0, 0 },
	{2, 0, 0, 0, 1, 0, 1, 0, 0, 1 },
	{4, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
	{6, 0, 1, 1, 0, 1, 1, 0, 0, 0 },
	{5, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
	{1, 0, 0, 1, 1, 0, 1, 0, 0, 1 },
	{3, 1, 1, 0, 0, 0, 0, 1, 0, 0 },
	{0, 0, 0, 0, 1, 0, 0, 0, 1, 1 },
	{7, 0, 1, 1, 1, 1, 1, 0, 0, 1 },
	{9, 1, 1, 0, 1, 0, 1, 1, 1, 0 },
	{4, 1, 1, 0, 0, 1, 0, 1, 1, 0 },
	{2, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
	{8, 0, 1, 0, 1, 0, 0, 0, 1, 1 },
	};
	const int number_err_4[rows][column] = {
		{4, 1, 1, 1, 0, 1, 0, 1, 1, 0 },
		{2, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
		{6, 1, 0, 1, 1, 0, 1, 0, 1, 0 },
		{3, 1, 1, 1, 0, 1, 1, 0, 0, 1 },
		{9, 0, 0, 0, 0, 1, 0, 1, 1, 0 },
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },
		{7, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
		{0, 1, 0, 1, 1, 0, 0, 0, 0, 1 },
		{5, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
		{8, 0, 1, 1, 1, 0, 0, 0, 1, 1 },
		{9, 1, 0, 0, 0, 1, 1, 1, 0, 1 },
		{0, 1, 0, 0, 1, 0, 0, 0, 0, 0 },
		{5, 0, 0, 1, 0, 0, 0, 0, 1, 1 },
		{1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
		{2, 0, 1, 1, 0, 0, 1, 1, 1, 1 },
		{8, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
		{7, 0, 1, 0, 1, 0, 1, 1, 0, 1 },
		{4, 0, 1, 1, 1, 1, 0, 0, 0, 0 },
		{6, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
		{3, 1, 1, 0, 0, 0, 0, 1, 1, 0 },
		{9, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
		{3, 0, 0, 0, 0, 1, 0, 1, 1, 1 },
		{7, 0, 0, 0, 0, 0, 1, 1, 0, 1 },
		{1, 0, 1, 1, 0, 0, 0, 1, 1, 1 },
		{5, 1, 1, 0, 0, 0, 0, 1, 0, 0 },
		{2, 0, 1, 1, 0, 0, 1, 1, 1, 1 },
		{4, 0, 0, 1, 1, 0, 1, 0, 1, 0 },
		{0, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
		{6, 1, 0, 0, 1, 1, 0, 0, 1, 1 },
		{8, 0, 0, 0, 1, 1, 0, 0, 1, 0 },
		{0, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
		{7, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
		{6, 0, 1, 1, 1, 1, 0, 0, 0, 1 },
		{8, 1, 1, 0, 0, 1, 0, 1, 0, 1 },
		{2, 0, 0, 0, 1, 0, 1, 1, 1, 0 },
		{4, 1, 0, 0, 1, 0, 1, 1, 0, 0 },
		{9, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
		{1, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
		{5, 1, 0, 1, 1, 1, 0, 0, 0, 0 },
		{3, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
		{3, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
		{6, 0, 1, 1, 1, 1, 1, 1, 0, 1 },
		{0, 1, 1, 0, 1, 1, 1, 1, 0, 0 },
		{9, 0, 1, 0, 0, 0, 0, 1, 0, 1 },
		{1, 1, 0, 1, 0, 0, 1, 1, 1, 0 },
		{2, 0, 0, 0, 0, 0, 1, 0, 0, 1 },
		{8, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
		{7, 0, 1, 1, 0, 0, 0, 1, 1, 1 },
		{4, 1, 1, 1, 0, 1, 0, 1, 1, 0 },
		{5, 1, 0, 1, 0, 1, 1, 0, 0, 1 },
		{5, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
		{1, 1, 1, 1, 1, 0, 1, 0, 0, 0 },
		{6, 0, 1, 1, 1, 1, 1, 0, 0, 0 },
		{3, 0, 1, 0, 0, 1, 1, 0, 1, 0 },
		{8, 1, 0, 0, 1, 1, 0, 1, 0, 1 },
		{2, 0, 1, 1, 0, 0, 1, 1, 0, 0 },
		{7, 0, 1, 1, 1, 0, 0, 1, 0, 1 },
		{4, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
		{9, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
		{0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },
		{1, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
		{4, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		{0, 1, 0, 0, 1, 1, 1, 1, 0, 1 },
		{9, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
		{6, 1, 1, 1, 0, 1, 0, 0, 1, 0 },
		{8, 0, 1, 0, 0, 1, 0, 0, 0, 1 },
		{3, 1, 1, 1, 0, 0, 1, 1, 0, 1 },
		{5, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
		{7, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
		{2, 0, 0, 1, 1, 0, 1, 0, 0, 1 },
		{9, 1, 1, 1, 1, 0, 1, 1, 1, 0 },
		{2, 1, 0, 0, 1, 0, 1, 0, 0, 1 },
		{7, 1, 1, 1, 0, 1, 1, 1, 1, 0 },
		{4, 1, 1, 1, 1, 1, 1, 0, 1, 1 },
		{5, 0, 0, 0, 0, 1, 0, 1, 0, 1 },
		{3, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
		{1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
		{0, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
		{8, 1, 0, 1, 1, 0, 0, 0, 1, 1 },
		{6, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{7, 1, 1, 1, 1, 0, 1, 1, 0, 1 },
		{9, 0, 0, 0, 1, 0, 0, 1, 0, 1 },
		{6, 1, 0, 1, 1, 1, 0, 0, 0, 1 },
		{8, 1, 1, 0, 0, 0, 1, 1, 0, 1 },
		{0, 0, 1, 0, 1, 1, 0, 1, 1, 1 },
		{1, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
		{3, 0, 1, 0, 1, 1, 0, 1, 1, 1 },
		{5, 0, 1, 0, 0, 1, 1, 0, 0, 0 },
		{2, 0, 0, 0, 1, 0, 1, 0, 0, 0 },
		{4, 0, 1, 1, 1, 1, 1, 0, 1, 0 },
		{6, 0, 1, 1, 0, 1, 1, 1, 0, 0 },
		{5, 1, 0, 1, 0, 0, 1, 0, 1, 1 },
		{1, 0, 1, 1, 1, 0, 1, 0, 0, 1 },
		{3, 1, 0, 0, 0, 0, 0, 1, 0, 0 },
		{0, 0, 0, 0, 1, 0, 0, 1, 1, 1 },
		{7, 0, 1, 1, 1, 1, 1, 1, 0, 1 },
		{9, 1, 1, 1, 1, 0, 1, 1, 1, 0 },
		{4, 1, 1, 0, 0, 0, 0, 1, 1, 0 },
		{2, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
		{8, 0, 0, 0, 1, 0, 0, 0, 1, 1 },
	};
	const int number_err_5[rows][column] = {
		{4, 1, 1, 1, 0, 1, 1, 1, 1, 0, },
		{2, 1, 0, 1, 1, 0, 1, 1, 0, 0, },
		{6, 1, 0, 1, 1, 0, 1, 1, 1, 0, },
		{3, 1, 1, 0, 0, 1, 1, 0, 0, 1, },
		{9, 0, 0, 0, 0, 0, 0, 1, 1, 0, },
		{1, 0, 1, 0, 1, 0, 1, 1, 0, 0, },
		{7, 0, 0, 0, 0, 0, 0, 0, 1, 1, },
		{0, 1, 0, 1, 1, 1, 0, 0, 0, 1, },
		{5, 0, 0, 0, 0, 0, 1, 1, 1, 1, },
		{8, 0, 0, 1, 1, 0, 0, 0, 1, 1, },
		{9, 1, 0, 0, 0, 1, 1, 0, 0, 1, },
		{0, 1, 0, 1, 1, 0, 0, 0, 0, 0, },
		{5, 0, 0, 1, 0, 0, 0, 1, 1, 1, },
		{1, 0, 0, 0, 0, 1, 1, 0, 1, 1, },
		{2, 0, 1, 1, 0, 0, 1, 1, 1, 0, },
		{8, 0, 1, 0, 0, 0, 1, 1, 0, 1, },
		{7, 0, 0, 0, 1, 0, 1, 1, 0, 1, },
		{4, 0, 1, 1, 1, 0, 0, 0, 0, 0, },
		{6, 1, 1, 1, 0, 0, 1, 1, 0, 1, },
		{3, 1, 1, 0, 1, 0, 0, 1, 1, 0, },
		{9, 0, 1, 1, 1, 0, 0, 1, 1, 1, },
		{3, 0, 0, 0, 0, 0, 0, 1, 1, 1, },
		{7, 0, 0, 0, 0, 0, 0, 1, 0, 1, },
		{1, 0, 1, 1, 0, 0, 1, 1, 1, 1, },
		{5, 0, 1, 0, 0, 0, 0, 1, 0, 0, },
		{2, 1, 1, 1, 0, 0, 1, 1, 1, 1, },
		{4, 0, 0, 1, 1, 0, 1, 0, 0, 0, },
		{0, 1, 0, 1, 1, 1, 0, 1, 1, 1, },
		{6, 1, 0, 0, 1, 1, 0, 0, 1, 0, },
		{8, 0, 0, 0, 1, 1, 0, 0, 0, 0, },
		{0, 0, 1, 0, 0, 0, 0, 1, 1, 0, },
		{7, 0, 0, 0, 0, 1, 0, 1, 0, 0, },
		{6, 0, 1, 0, 1, 1, 0, 0, 0, 1, },
		{8, 0, 1, 0, 0, 1, 0, 1, 0, 1, },
		{2, 0, 0, 1, 1, 0, 1, 1, 1, 0, },
		{4, 1, 0, 1, 1, 0, 1, 1, 0, 0, },
		{9, 0, 1, 0, 1, 1, 1, 0, 1, 1, },
		{1, 0, 1, 0, 0, 0, 0, 1, 0, 0, },
		{5, 1, 0, 1, 1, 1, 1, 0, 0, 1, },
		{3, 0, 1, 0, 1, 0, 1, 1, 0, 1, },
		{3, 0, 0, 0, 0, 0, 0, 0, 1, 0, },
		{6, 0, 1, 1, 1, 1, 0, 1, 0, 1, },
		{0, 1, 1, 1, 1, 1, 1, 1, 0, 0, },
		{9, 0, 0, 0, 0, 0, 0, 1, 0, 1, },
		{1, 1, 1, 1, 0, 0, 1, 1, 1, 0, },
		{2, 0, 0, 0, 0, 0, 1, 0, 1, 1, },
		{8, 0, 1, 1, 1, 1, 1, 1, 0, 0, },
		{7, 0, 0, 1, 0, 0, 0, 1, 1, 1, },
		{4, 1, 1, 1, 0, 0, 0, 1, 1, 0, },
		{5, 0, 0, 1, 0, 1, 1, 0, 0, 1, },
		{5, 1, 1, 1, 1, 1, 1, 1, 0, 1, },
		{1, 1, 1, 0, 1, 0, 1, 0, 0, 0, },
		{6, 0, 1, 1, 1, 0, 1, 0, 0, 0, },
		{3, 1, 1, 0, 0, 1, 1, 0, 1, 0, },
		{8, 1, 0, 0, 1, 0, 0, 1, 0, 1, },
		{2, 0, 1, 1, 0, 0, 1, 1, 1, 0, },
		{7, 0, 1, 1, 1, 1, 0, 1, 0, 1, },
		{4, 0, 0, 1, 0, 0, 0, 0, 0, 0, },
		{9, 0, 0, 0, 1, 0, 1, 1, 0, 1, },
		{0, 0, 1, 0, 1, 0, 0, 1, 0, 0, },
		{1, 0, 1, 0, 1, 1, 1, 0, 1, 1, },
		{4, 0, 1, 0, 1, 0, 1, 0, 1, 1, },
		{0, 1, 0, 0, 1, 1, 1, 1, 0, 0, },
		{9, 1, 1, 0, 0, 0, 0, 0, 1, 1, },
		{6, 1, 1, 1, 0, 1, 0, 0, 0, 0, },
		{8, 0, 0, 0, 0, 1, 0, 0, 0, 1, },
		{3, 1, 1, 1, 0, 0, 1, 0, 0, 1, },
		{5, 0, 1, 1, 1, 1, 0, 1, 1, 0, },
		{7, 0, 0, 0, 1, 0, 0, 1, 0, 0, },
		{2, 0, 0, 1, 1, 0, 1, 0, 1, 1, },
		{9, 1, 1, 1, 0, 0, 1, 1, 1, 0, },
		{2, 1, 0, 0, 1, 0, 1, 0, 1, 1, },
		{7, 1, 1, 1, 0, 1, 1, 1, 1, 1, },
		{4, 0, 1, 1, 1, 1, 1, 0, 1, 1, },
		{5, 0, 0, 0, 0, 0, 0, 1, 0, 1, },
		{3, 0, 0, 0, 0, 0, 1, 1, 0, 1, },
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, },
		{0, 1, 0, 1, 0, 0, 0, 1, 1, 1, },
		{8, 1, 0, 1, 1, 0, 0, 0, 1, 0, },
		{6, 1, 0, 0, 1, 0, 0, 0, 1, 1, },
		{7, 1, 0, 1, 1, 0, 1, 1, 0, 1, },
		{9, 0, 0, 0, 1, 0, 0, 1, 1, 1, },
		{6, 1, 0, 1, 1, 1, 0, 1, 0, 1, },
		{8, 1, 1, 1, 0, 0, 1, 1, 0, 1, },
		{0, 0, 1, 1, 1, 1, 0, 1, 1, 1, },
		{1, 1, 0, 0, 0, 0, 1, 1, 1, 0, },
		{3, 0, 1, 0, 1, 0, 0, 1, 1, 1, },
		{5, 0, 1, 0, 0, 0, 1, 0, 0, 0, },
		{2, 0, 0, 0, 0, 0, 1, 0, 0, 0, },
		{4, 0, 1, 1, 1, 1, 1, 1, 1, 0, },
		{6, 0, 1, 1, 0, 0, 1, 1, 0, 0, },
		{5, 1, 0, 1, 0, 0, 1, 1, 1, 1, },
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 1, },
		{3, 1, 0, 0, 0, 0, 0, 1, 1, 0, },
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, },
		{7, 0, 1, 1, 1, 1, 0, 1, 0, 1, },
		{9, 1, 1, 1, 1, 0, 1, 1, 1, 1, },
		{4, 0, 1, 0, 0, 0, 0, 1, 1, 0, },
		{2, 1, 0, 0, 0, 0, 0, 1, 1, 0, },
		{8, 0, 0, 0, 0, 0, 0, 0, 1, 1, },
	};

	cout << "Первое дерево, 3 помехи: " << endl;
	TreeOne(number_err_3, teta, rows);

	cout << endl;
	cout << "Второе дерево, 3 помехи: " << endl;
	TreeOne(number_err_3, teta, rows);

	cout << endl;
	cout << "Первое дерево, 4 помехи: " << endl;
	TreeOne(number_err_4, teta, rows);

	cout << endl;
	cout << "Второе дерево, 4 помехи: " << endl;
	TreeOne(number_err_4, teta, rows);

	cout << endl;
	cout << "Первое дерево, 5 помех: " << endl;
	TreeOne(number_err_5, teta, rows);

	cout << endl;
	cout << "Второе дерево, 5 помех: " << endl;
	TreeOne(number_err_5, teta, rows);


}